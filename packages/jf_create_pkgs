def artifactory_name = "kristianj"
def artifactory_repo = "includeos-develop"
def repo_url = 'https://github.com/hioa-cs/IncludeOS.git'
def repo_branch = 'conan'

def conan_user = 'includeos'
def conan_channel = 'tools'

pipeline {
  agent {
    label 'conan_pipe_worker'
  }

  // should create a library for these lists of values
  parameters {
    string(name: 'Packages', defaultValue: 'musl')
    string(name: 'DepLocation', defaultValue: '')
    string(name: 'Versions', defaultValue: 'v1.1.18')
    string(name: 'Build_types', defaultValue: 'Release, Debug')
    string(name: 'Target_Architectures', defaultValue: 'x86_64, x86')
    string(name: 'Target_OS', defaultValue: 'Linux')
    string(name: 'Profiles', defaultValue: 'clang-6.0-linux-i386, clang-6.0-linux-x86_64')
    string(name: 'ProfilesToolchain', defaultValue: 'clang-6.0-linux-i386-toolchain, clang-6.0-linux-x86_64-toolchain')
    // keeping compiler version out of this, assuming it will be part of the profiles
    string(name: 'CompilerVer', defaultValue: '6.0') //clang version
  }

  stages {
      stage('Build') {
        steps {
          // should check if size of parameter is one, then no need to remove quotations
          script {
            def packages = "${params.Packages}"
            def versions = "${params.Versions}"
            def target_os = "${params.Target_OS}"
            def compiler_version = "${params.CompilerVer}"
            def dep_location = "${params.DepLocation}"


            def target_architectures = "${params.Target_Architectures}".replaceAll("\\s", "").split(',')
            def build_types = "${params.Build_types}".replaceAll("\\s", "").split(',')
            def profiles = "${params.Profiles}".replaceAll("\\s", "").split(',')
            def profiles_toolchain = "${params.ProfilesToolchain}".replaceAll("\\s", "").split(',')

            currentBuild.description = "branch: ${GIT_BRANCH}, building: ${packages}/${versions} \
                                          build_type: ${build_types} \
                                          profile: ${profiles}"
            def builds = [:]


            for (prof_toolchain in profiles_toolchain) {
              for (prof in profiles) {
                  for (t_arch in target_architectures) {
                    for (build in build_types) {
                      String buildName = "${packages}-${build}-${t_arch}-${prof}"
                      builds[buildName] = {
                        node('conan_pipe_worker') {
                          stage(buildName){
                                  git branch: repo_branch, url: repo_url
                                  sh """
                                    if [ -z "${dep_location}" ];
                                    then
                                      echo "creating ${packages}"
                                      conan create conan/${packages}/${versions} \
                                      -s build_type=${build} \
                                      -pr ${prof} ${conan_user}/${conan_channel}

                                    elif [ -n "${dep_location}" ];
                                    then
                                      echo "creating ${dep_location}/${packages}"
                                      conan create conan/${dep_location}/${packages} \
                                      -s build_type=${build} \
                                      -pr ${prof} ${packages}/${versions}@${conan_user}/${conan_channel}
                                    else
                                      echo "creating ${packages}"
                                      conan create conan/${packages} \
                                      -s build_type=${build} \
                                      -pr ${prof} ${conan_user}/${conan_channel}
                                    fi
                                  """
                          }
                        }
                      }
                    }
                  }
              }
            }
            parallel builds
          }
        }
      }
  }
}
